import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

# –í–°–¢–ê–í–¨ –°–Æ–î–ê –¢–û–ö–ï–ù –û–¢ BOTFATHER
BOT_TOKEN = "8334419911:AAEX8AtvIBRqTny-eoNEhwCaThwO2fGp7LQ"

# ---------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–¢–ê–¢–ê ----------
players_list = []       # —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–º–∏–Ω –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç (–∏–º–µ–Ω–∞, –Ω–µ —é–∑–µ—Ä–Ω–µ–π–º—ã)
captains = []           # —Å–ø–∏—Å–æ–∫ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ (—Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "@username")
teams = {}              # {captain: [–∏–≥—Ä–æ–∫–∏]}
turn_index = 0
draft_started = False

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------
def remaining_players_keyboard():
    kb = []
    for p in players_list:
        if not any(p in lst for lst in teams.values()):
            kb.append([InlineKeyboardButton(text=p, callback_data=f"pick:{p}")])
    if not kb:
        # –ø—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ–≥–¥–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç
        return InlineKeyboardMarkup(inline_keyboard=[])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def players_preview_text():
    if not players_list:
        return "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç. –í–≤–µ–¥–∏ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_players"
    return "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –≤–≤–µ–¥–µ–Ω–∏—è):\n" + "\n".join(f"‚Ä¢ {p}" for p in players_list)

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def cmd_set_players(msg: Message):
    """
    /set_players –∏–º—è1, –∏–º—è2, –∏–º—è3
    –∏–ª–∏
    /set_players
    –∏–º—è1
    –∏–º—è2
    –∏–º—è3
    """
    global players_list, draft_started, teams, turn_index

    text = msg.text[len("/set_players"):].strip()
    if not text:
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/set_players –ò–º—è1, –ò–º—è2, –ò–º—è3`\n–∏–ª–∏\n`/set_players` –∏ –¥–∞–ª–µ–µ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø–æ —Å—Ç—Ä–æ–∫–∞–º.",
                         parse_mode="Markdown")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫–∏
    parts = [p.strip() for p in (text.replace(",", "\n").splitlines()) if p.strip()]
    players_list = parts
    # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—Ä–∞—Ñ—Ç–∞ ‚Äî –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
    draft_started = False
    teams = {}
    turn_index = 0
    await msg.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.\n" + players_preview_text())

async def cmd_set_captains(msg: Message):
    global captains, teams, turn_index, draft_started
    parts = msg.text.split()[1:]
    if not parts:
        await msg.answer("–£–∫–∞–∂–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/set_captains @cap1 @cap2 @cap3`", parse_mode="Markdown")
        return
    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @
    caps = [p if p.startswith("@") else f"@{p}" for p in parts]
    captains = caps
    teams = {cap: [] for cap in captains}
    turn_index = 0
    draft_started = False
    await msg.answer(f"üß¢ –ö–∞–ø–∏—Ç–∞–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã: {', '.join(captains)}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–∑–æ–≤–∏ /start_draft —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–±–æ—Ä.")

async def cmd_start_draft(msg: Message):
    global draft_started, turn_index, teams
    if not players_list:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /set_players")
        return
    if not captains:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /set_captains")
        return
    teams = {cap: [] for cap in captains}  # —Å–±—Ä–æ—Å –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    turn_index = 0
    draft_started = True
    first = captains[turn_index]
    await msg.answer(f"üèÅ –î—Ä–∞—Ñ—Ç –Ω–∞—á–∞—Ç! –ü–µ—Ä–≤—ã–π —Ö–æ–¥: {first}\n\n{players_preview_text()}",
                     reply_markup=remaining_players_keyboard())

async def cmd_status(msg: Message):
    text = "üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
    text += players_preview_text() + "\n\n"
    if not captains:
        text += "–ö–∞–ø–∏—Ç–∞–Ω—ã: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n"
    else:
        for cap in captains:
            members = teams.get(cap, [])
            text += f"{cap}: " + (", ".join(members) if members else "‚Äî") + "\n"
        if draft_started:
            text += f"\n–°–µ–π—á–∞—Å —Ö–æ–¥ {captains[turn_index]}"
    await msg.answer(text)

async def cmd_reset(msg: Message):
    global players_list, captains, teams, turn_index, draft_started
    players_list = []
    captains = []
    teams = {}
    turn_index = 0
    draft_started = False
    await msg.answer("üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. /set_players —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ.")

# ---------- CALLBACKS (–≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞) ----------
async def pick_player(cb: CallbackQuery):
    global turn_index, draft_started
    if not draft_started:
        await cb.answer("–î—Ä–∞—Ñ—Ç –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç. –í—ã–∑–æ–≤–∏—Ç–µ /start_draft.", show_alert=True)
        return
    captain = captains[turn_index]
    user = f"@{cb.from_user.username}" if cb.from_user.username else cb.from_user.full_name
    if user != captain:
        await cb.answer("–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å).", show_alert=True)
        return
    player = cb.data.split(":", 1)[1]
    if any(player in lst for lst in teams.values()):
        await cb.answer("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return
    teams[captain].append(player)
    # –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞
    turn_index = (turn_index + 1) % len(captains)
    remaining = [p for p in players_list if not any(p in lst for lst in teams.values())]
    if not remaining:
        txt = "üèÅ –î—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
        for cap, members in teams.items():
            txt += f"{cap}:\n" + ("\n".join(f"‚Ä¢ {m}" for m in members) if members else "‚Ä¢ ‚Äî") + "\n\n"
        await cb.message.edit_text(txt)
        await cb.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
        draft_started = False
        return
    next_cap = captains[turn_index]
    await cb.message.edit_text(
        f"‚úÖ {captain} –≤—ã–±—Ä–∞–ª *{player}*.\n–¢–µ–ø–µ—Ä—å —Ö–æ–¥ {next_cap}.\n\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è:\n" + "\n".join(f"‚Ä¢ {p}" for p in remaining),
        parse_mode="Markdown",
        reply_markup=remaining_players_keyboard()
    )
    await cb.answer()

# ---------- –ó–ê–ü–£–°–ö ----------
async def main():
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher()

    dp.message.register(cmd_set_players, Command("set_players"))
    dp.message.register(cmd_set_captains, Command("set_captains"))
    dp.message.register(cmd_start_draft, Command("start_draft"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(cmd_reset, Command("reset_draft"))
    dp.callback_query.register(pick_player, F.data.startswith("pick:"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
